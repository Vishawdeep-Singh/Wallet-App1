// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  name        String?
  number      String  @unique
  password    String
  OnRampTransaction OnRampTransaction[]
  OffRampTransaction OffRampTransaction[]
  Balance           Balance[]
   sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  SentMerchantTransfers user2merchantTx[]   @relation(name:"FromUser")
}
model Merchant {
  id          String     @id 
  email       String?  @unique
  name        String?
  OffRampTransaction MerchantOffRampTransaction[]
  MerchantBalance MerchantBalance[]
   ReceivedFromUsers user2merchantTx[]   @relation(name:"ToMerchant")
  
}
model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}
model OffRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int

  user      User         @relation(fields: [userId], references: [id])

}
model MerchantOffRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime

  merchantId String

  merchant Merchant      @relation(fields: [merchantId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique

  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])

}
model MerchantBalance {
  id     Int  @id @default(autoincrement())
  merchantId String @unique
  amount Int
  locked Int
  merchant   Merchant @relation(fields: [merchantId], references: [id])
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model user2merchantTx {
  id Int @id @default(autoincrement())
  amount Int
  fromUserId Int
  fromUser User     @relation(name: "FromUser",fields: [fromUserId], references: [id])
  toMerchantId String
  toMerchant Merchant @relation(name: "ToMerchant",fields: [toMerchantId], references: [id])
  timestamp  DateTime
  status OnRampStatus
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}